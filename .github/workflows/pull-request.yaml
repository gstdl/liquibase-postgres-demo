name: Pull Request Actions

on:
  pull_request:

jobs:
  build:
    name: Lint and Format Code
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: read
      # To report GitHub Actions status checks
      statuses: write
      checks: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11.7

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sqlfluff

      - name: Get changed files
        uses: trilom/file-changes-action@v1.2.4
        with:
          fileOutput: ' '

      - name: Get changed .sql files to lint
        id: get_files_to_lint
        shell: bash -l {0}
        run: echo "lintees=$(cat $HOME/files.txt | tr -s ' ' '\n' | grep '^changelog' | grep '\.sql$' | tr -s '\n' ' ')" >> $GITHUB_OUTPUT

      - name: Lint sql files
        id: linting
        if: steps.get_files_to_lint.outputs.lintees != ''
        shell: bash -l {0}
        run: sqlfluff lint --config .sqlfluff --format github-annotation --annotation-level failure --nofail ${{ steps.get_files_to_lint.outputs.lintees }} > annotations.json

      - name: Mark files to annotate
        id: annotation_marking
        if: steps.linting.outcome == 'success'
        shell: bash -l {0}
        run: cat annotations.json | jq -c 'map(select(.message | startswith("TMP") or startswith("PRS")))' >> filtered_annotations.json

      - name: Get files to format
        id: get_files_to_format
        if: steps.linting.outcome == 'success'
        shell: bash -l {0}
        run: echo "lintees=$(cat annotations.json | jq -c 'map(select(.message | startswith("TMP") or startswith("PRS") | not))' | jq -r '.[] | .file' | sort | uniq | awk '{seen[$0]++} END {for (line in seen) {print line; print line}}' | tr -s '\n' ' ')" >> $GITHUB_OUTPUT

      - name: Annotate
        id: annotate
        uses: yuzutech/annotations-action@v0.3.0
        if: steps.annotation_marking.outcome == 'success'
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          title: "SQLFluff Lint"
          input: "./filtered_annotations.json"
      
      - name: PR review preparation
        id: pre_review
        if: steps.annotate.outcome == 'success'
        run: |
          echo "comment=$(cat filtered_annotations.json | jq -r '.[] | {path: .file, position: .end_line, body: .message}' | jq -s | tr -d '\n' | tr -s ''\''' '`')" >> $GITHUB_OUTPUT

      - name: PR review
        if: steps.pre_review.outputs.comment != '[]'
        run: |
          curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.BOT_PAT }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -X POST \
            -d '{"commit_id": "${{ github.sha }}", "body": "SQL PARSING ERROR DETECTED! Please fix them.", "event":"REQUEST_CHANGES", "comments": ${{ steps.pre_review.outputs.comment }}' \
            https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.number }}/reviews
        
      # - name: Cleanup files
      #   id: steps.pre_review.outcome == 'success'
      #   run: rm annotations.json filtered_annotations.json $HOME/files.txt

      - name: Format sql files
        id: formatting
        if: steps.get_files_to_format.outputs.lintees != ''
        shell: bash -l {0}
        run: sqlfluff fix --config .sqlfluff ${{ steps.get_files_to_format.outputs.lintees }}

      - uses: stefanzweifel/git-auto-commit-action@v5
        if: steps.formatting.outcome == 'success'
        with:
          commit_message: "Git auto-commit: lint and format sql"